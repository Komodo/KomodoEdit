# UDL lexer for R.
#
# Note: UDL is a state machine and it uses regular expressions to move between
#       the different language states.
#

language R

################ Boilerplate ################

# Boilerplate - need to start with family set to markup and IN_M_DEFAULT state,
# we'll later perform a null-transition change to get into the SSL state.
family markup
initial IN_M_DEFAULT
# Null-transition to get into SSL state
state IN_M_DEFAULT:
/./ : redo, => IN_SSL_DEFAULT

################ Language Start ################

family ssl # server side language

# Specify the min and max styles we'll be referring to.
start_style SSL_DEFAULT
end_style SSL_VARIABLE

# If the language has keywords, specify which style needs to be transformed
keyword_style SSL_IDENTIFIER => SSL_WORD
keywords [
  "break", "else", "for", "function", "if", "in", "next", "repeat", "return",
  "switch", "while", "Inf", "NA", "NaN", "NULL", "FALSE", "TRUE",
  "array", "character", "complex", "data.frame", "double", "factor",
  "integer", "list", "logical", "matrix", "numeric", "vector"
        ]

# Set the basic patterns we'll be using for styling transitions.
# For most programming languages, names cannot start with a number, but they
# often allow a number after the first character - e.g. "bar21a"
pattern FIRSTNAMECHAR = '_a-zA-Z\x80-\xff' # names (identifier, keyword, variable...) only can start with these chars
pattern NAMECHAR = '$FIRSTNAMECHAR\d'      # rest of the name, after the first char
pattern WS = '\s\t\r\n'                    # whitespace
pattern OP = '!\$%&\(\)\*\+,-\/:;<=>\?@\[\]\^\{\}~|'  # operator characters - escaping special regex values

################ Default Style ################

# Define what happens when in default (initial) state. This is where we set up
# the transitions to other states.
state IN_SSL_DEFAULT:

# ----------- Entering Comments ---------- #

# Hash-style one line comments
'#' : paint(upto, SSL_DEFAULT),  => IN_SSL_COMMENT_TO_EOL

# ----------- Entering Whitespace ---------- #

# Just stay in whatever style we currently are using.
/[$WS]+/  : #stay

# ----------- Entering Strings ---------- #

'"' : paint(upto, SSL_DEFAULT), => IN_SSL_DSTRING
'\'' : paint(upto, SSL_DEFAULT), => IN_SSL_SSTRING

# ----------- Entering Numbers ---------- #

# Go process a number, try to do it in regexes octal and hex first.
/0[Xx][0-9a-fA-F]+/ : paint(upto, SSL_DEFAULT), paint(include, SSL_NUMBER)  # Hex numbers
/[-+]?\d/ : paint(upto, SSL_DEFAULT), => IN_SSL_NUMBER_1
/[-+]?\.\d/ : paint(upto, SSL_DEFAULT), => IN_SSL_NUMBER_2

# ----------- Entering Identifiers ---------- #

/[$FIRSTNAMECHAR][$NAMECHAR]*/ : paint(upto, SSL_DEFAULT), paint(include, SSL_IDENTIFIER)

# ----------- Entering Operators ---------- #

/%(\\\/|\\*|in|o|x)?%/ : paint(upto, SSL_DEFAULT), paint(include, SSL_OPERATOR)
/[$OP]/ : paint(upto, SSL_DEFAULT), paint(include, SSL_OPERATOR)


################ In Comments - determines how we exit a comment ################

state IN_SSL_COMMENT_TO_EOL: 
/[\r\n]/ : paint(upto, SSL_COMMENT), => IN_SSL_DEFAULT  # back to default state

################ In Strings - determines how we exit a string ################

state IN_SSL_DSTRING:
'"' : paint(include, SSL_STRING), => IN_SSL_DEFAULT  # back to default state
/\\./ : #stay, anything escaped means it's still a string

state IN_SSL_SSTRING:
'\'' : paint(include, SSL_STRING), => IN_SSL_DEFAULT  # back to default state
/\\./ : #stay, anything escaped means it's still a string

################ Numbers ################

state IN_SSL_NUMBER_1 :
/$/ : paint(upto, SSL_NUMBER), => IN_SSL_DEFAULT
'.' : => IN_SSL_NUMBER_2
/[\d]/ : #stay
/[Ee][-+]?/ : => IN_SSL_NUMBER_3
/./ : paint(upto, SSL_NUMBER), redo, => IN_SSL_DEFAULT

state IN_SSL_NUMBER_2:
/$/ : paint(upto, SSL_NUMBER), => IN_SSL_DEFAULT
/[\d]/ : #stay
/[Ee][-+]?/ : => IN_SSL_NUMBER_3
'.' : paint(upto, SSL_NUMBER), paint(include, SSL_OPERATOR),  => IN_SSL_DEFAULT
/./ : paint(upto, SSL_NUMBER), redo, => IN_SSL_DEFAULT

state IN_SSL_NUMBER_3:
/$/ : paint(upto, SSL_NUMBER), => IN_SSL_DEFAULT
/[^\d]/ : paint(upto, SSL_NUMBER), redo, => IN_SSL_DEFAULT

################ End of State Handling ################


################ Fold Handling ################

# Uncomment to enable folding on "{" and "}"

fold "{" SSL_OPERATOR +
fold "}" SSL_OPERATOR -

################ End of Fold Handling ################

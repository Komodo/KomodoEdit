#!/bin/bash

# Default docker image to use.
if [ -z "$DOCKER_IMAGE_NAME" ]; then
    DOCKER_IMAGE_NAME="komodo"
fi

# local name for the container
if [ -z "$DOCKER_CONTAINER_NAME" ]; then
    DOCKER_CONTAINER_NAME="${DOCKER_IMAGE_NAME}-container"
fi

# our current dirname
DIRNAME="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
KODIRNAME="$DIRNAME/../../"

if [ "$(id -u)" != "0" ]; then
    USERNAME=$(whoami)
else
    if [ -n "$SUDO_USER" ]; then
        USERNAME=$SUDO_USER
    else
        USERNAME=$(whoami)
    fi
fi

function retrieveContainerStatus {
    # check if container already present
    TMP=$(docker ps -a | grep ${DOCKER_CONTAINER_NAME})
    CONTAINER_FOUND=$?

    TMP=$(docker ps | grep ${DOCKER_CONTAINER_NAME})
    CONTAINER_RUNNING=$?
}

retrieveContainerStatus

function retrieveSshInfo {
    # find ssh port
    SSH_URL=$(docker port ${DOCKER_CONTAINER_NAME} 22)

    #SSH_URL_REGEX="(.*):(.*)"
    #SSH_INTERFACE=$(echo $SSH_URL | awk -F  ":" '/1/ {print $1}')
    #SSH_PORT=$(echo $SSH_URL | awk -F  ":" '/1/ {print $2}')

    IFS=':' read SSH_INTERFACE SSH_PORT <<< "$SSH_URL"
}

function start {

    if [ $CONTAINER_FOUND -eq 0 ]; then

        echo -n "container '${DOCKER_CONTAINER_NAME}' found, "

        if [ $CONTAINER_RUNNING -eq 0 ]; then
            echo "already running"
        else
            echo -n "not running, starting..."
            TMP=$(docker start ${DOCKER_CONTAINER_NAME})
            sleep 2
            echo "done"
        fi

    else
        echo -n "container '${DOCKER_CONTAINER_NAME}' not found, creating..."
        TMP=$(docker run -d -P --name ${DOCKER_CONTAINER_NAME} -v ${KODIRNAME}:/komodo/dev -v /home/${USERNAME}/.ActiveState:/komodo/.ActiveState -v /home/${USERNAME}/.komodoide:/komodo/.komodoide ${DOCKER_IMAGE_NAME})

        sleep 2

        echo "done"
        retrieveContainerStatus

        # Create komodo user which maps to our local user, so as to preserve file permissions
        setSshCmd
        local PASSWORD=$(perl -e'print crypt("komodo", "aa")')
        local _UID=$(id -u ${USERNAME})
        ${SSH_CMD_ROOT} "useradd -d /komodo -u ${_UID} -g 100 -p ${PASSWORD} -s /bin/bash komodo && \
                        usermod -a -G sudo komodo && \
                        cp -R /root/.ssh /komodo/.ssh && \
                        chown ${_UID}:100 /komodo && chown -R ${_UID}:100 /komodo/.ssh && \
                        echo \"PATH=/komodo/dev/util/black:\$PATH\" >> /komodo/.profile && \
                        echo \"include \\\"/usr/share/themes/Radiance/gtk-2.0/gtkrc\\\"\" > /komodo/.gtkrc-2.0 && \
                        chown ${_UID}:100 /komodo/.profile && chown ${_UID}:100 /komodo/.gtkrc-2.0
                        su - komodo -c \"gconftool-2 --type=string --set /desktop/gnome/interface/gtk_theme Radiance\""

    fi

    status
    
}

function stop {
    if [ $CONTAINER_RUNNING -eq 0 ]; then
        echo -n "Stopping Container.. "
        TMP=$(docker stop ${DOCKER_CONTAINER_NAME})
        TMP=$(docker rm ${DOCKER_CONTAINER_NAME})
        echo "done"
    else
        echo "Container already stopped"
    fi

    retrieveContainerStatus
}

function status {
    retrieveSshInfo

    if [ $CONTAINER_FOUND -eq 0 ]; then

        if [ $CONTAINER_RUNNING -eq 0 ]; then
            echo "port: " $(docker port ${DOCKER_CONTAINER_NAME} 22)
        else
            echo "container '${DOCKER_CONTAINER_NAME}' found but not running"
        fi

    else
        echo "container '${DOCKER_CONTAINER_NAME}' not found"
    fi
}

function setSshCmd {
    if [ $CONTAINER_RUNNING -ne 0 ]; then
        echo "Container is not running"
        exit 0
    fi
    retrieveSshInfo
    SSH_CMD=$(echo ssh -i "${DIRNAME}/id_rsa" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -Y -X komodo@${SSH_INTERFACE} -p ${SSH_PORT})
    SSH_CMD_ROOT=$(echo ssh -i "${DIRNAME}/id_rsa" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -Y -X root@${SSH_INTERFACE} -p ${SSH_PORT})
}

function _ssh {
    setSshCmd
    echo ${SSH_CMD}
    ${SSH_CMD}
}

function _sshroot {
    setSshCmd
    ${SSH_CMD_ROOT}
}

function clean {
    setSshCmd
    ${SSH_CMD} "PATH=/komodo/dev/util/black:\$PATH && cd /komodo/dev && bk distclean"
}

function run {
    setSshCmd
    ${SSH_CMD} "PATH=/komodo/dev/util/black:\$PATH && cd /komodo/dev && bk build"
    cd $KODIRNAME
    ./mozilla/build/moz3500-ko9.10/mozilla/ko-rel/dist/bin/komodo # Todo: auto-detect path
}

function build {
    flavour=$1
    if [ -z "${flavour}" ]; then
        flavour="."
    fi
    cd ${DIRNAME}
    docker build -t ${DOCKER_IMAGE_NAME} $flavour
}

function deleteBuild {
    stop
    docker rmi -f ${DOCKER_IMAGE_NAME}
}

function help {
    echo "Manage Komodo-Dev container"
    echo " "
    echo "options:"
    echo "build [--flavour DIR]     build the image; flavour defaults to the current dir"
    echo "rebuild                   rebuild the image (deletes image and containers)"
    echo "start                     start container"    
    echo "stop                      stop container"
    echo "clean                     bk distclean"
    echo "run                       build & run Komodo on host"
    echo "status                    show container status"    
    echo "ssh                       ssh into container"
    echo "-h, --help                show brief help"
    exit 0
}

while true; do
    case "$1" in
        start)
            start
            shift
            ;;
        status)
            status
            shift
            ;;
        ssh)
            _ssh
            break
            ;;
        sshroot)
            _sshroot
            break
            ;;
        stop)
            stop
            shift
            ;;
        clean)
            clean
            shift
            ;;
        run)
            run
            shift
            ;;
        build)
            flavour=""
            if [ "$2" == "--flavour" ]; then
                flavour=$3
                shift 2
            fi
            build $flavour
            shift
            ;;
        rebuild)
            deleteBuild
            build
            shift
            ;;
        -h|--help)
            help
            break
            ;;
    esac
    sleep 1
    if [ -z "$VAR" ]; then
        break
    fi
done;


